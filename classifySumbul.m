% This trains a supervised classifier, and tries to see how well we
% perform

clear all, close all


featureList = { 'biStratificationDistance', ...
                'densityOfBranchPoints ' ...
                'stratificationDepth', ...
                'totalDendriticLength' };

r = RGCclass(0);
r.lazyLoad('Sumbul');

r.allFeatureNames = { 'biStratificationDistance', ...
                      'branchAssymetry', ...
                      'dendriticDensity', ...
                      'dendriticDiameter', ...
                      'dendriticField', ...
                      'densityOfBranchPoints', ...
                      'fractalDimensionBoxCounting', ...
                      'meanBranchAngle', ...
                      'meanSegmentLength', ...
                      'meanSegmentTortuosity', ...
                      'meanTerminalSegmentLength', ... 
                      'numBranchPoints', ...
                      'stratificationDepth', ...
                      'totalDendriticLength' };

sumbulIdx = r.getRGCSubset('sumbul');

knownIdx = find(r.RGCtypeID > 0);

useIdx = intersect(sumbulIdx,knownIdx);


r.RGC = r.RGC(useIdx);
r.updateTables(featureList); % Also sets featureMatrix

r.dataSetName = 'KnownSumbul';
r.lazySave('knownSumbul');

[corrFraction,corrFractionSD,correctFraction, ...
 classifiedID,correctFlag, mu, sigma, dataIdx] = r.benchmark(10);

fprintf('correct fraction %.1f %% +/- %.1f %%\n', 100*corrFraction, 100*corrFractionSD)